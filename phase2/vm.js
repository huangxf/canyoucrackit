var VM = {

    cpu: {
        ip: 0x00,

        r0: 0x00,
        r1: 0x00,
        r2: 0x00,
        r3: 0x00,

        cs: 0x00,
        ds: 0x10,

        fl: 0x00,

        firmware: [0xd2ab1f05, 0xda13f110]
    },

    mem: [
        0x31, 0x04, 0x33, 0xaa, 0x40, 0x02, 0x80, 0x03, 0x52, 0x00, 0x72, 0x01, 0x73, 0x01, 0xb2, 0x50,
        0x30, 0x14, 0xc0, 0x01, 0x80, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x98, 0xab, 0xd9, 0xa1, 0x9f, 0xa7, 0x83, 0x83, 0xf2, 0xb1, 0x34, 0xb6, 0xe4, 0xb7, 0xca, 0xb8,
        0xc9, 0xb8, 0x0e, 0xbd, 0x7d, 0x0f, 0xc0, 0xf1, 0xd9, 0x03, 0xc5, 0x3a, 0xc6, 0xc7, 0xc8, 0xc9,
        0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
        0xda, 0xdb, 0xa9, 0xcd, 0xdf, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
        0x26, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
        0x7d, 0x1f, 0x15, 0x60, 0x4d, 0x4d, 0x52, 0x7d, 0x0e, 0x27, 0x6d, 0x10, 0x6d, 0x5a, 0x06, 0x56,
        0x47, 0x14, 0x42, 0x0e, 0xb6, 0xb2, 0xb2, 0xe6, 0xeb, 0xb4, 0x83, 0x8e, 0xd7, 0xe5, 0xd4, 0xd9,
        0xc3, 0xf0, 0x80, 0x95, 0xf1, 0x82, 0x82, 0x9a, 0xbd, 0x95, 0xa4, 0x8d, 0x9a, 0x2b, 0x30, 0x69,
        0x4a, 0x69, 0x65, 0x55, 0x1c, 0x7b, 0x69, 0x1c, 0x6e, 0x04, 0x74, 0x35, 0x21, 0x26, 0x2f, 0x60,
        0x03, 0x4e, 0x37, 0x1e, 0x33, 0x54, 0x39, 0xe6, 0xba, 0xb4, 0xa2, 0xad, 0xa4, 0xc5, 0x95, 0xc8,
        0xc1, 0xe4, 0x8a, 0xec, 0xe7, 0x92, 0x8b, 0xe8, 0x81, 0xf0, 0xad, 0x98, 0xa4, 0xd0, 0xc0, 0x8d,
        0xac, 0x22, 0x52, 0x65, 0x7e, 0x27, 0x2b, 0x5a, 0x12, 0x61, 0x0a, 0x01, 0x7a, 0x6b, 0x1d, 0x67,
        0x75, 0x70, 0x6c, 0x1b, 0x11, 0x25, 0x25, 0x70, 0x7f, 0x7e, 0x67, 0x63, 0x30, 0x3c, 0x6d, 0x6a,
        0x01, 0x51, 0x59, 0x5f, 0x56, 0x13, 0x10, 0x43, 0x19, 0x18, 0xe5, 0xe0, 0xbe, 0xbf, 0xbd, 0xe9,
        0xf0, 0xf1, 0xf9, 0xfa, 0xab, 0x8f, 0xc1, 0xdf, 0xcf, 0x8d, 0xf8, 0xe7, 0xe2, 0xe9, 0x93, 0x8e,
        0xec, 0xf5, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        0x37, 0x7a, 0x07, 0x11, 0x1f, 0x1d, 0x68, 0x25, 0x32, 0x77, 0x1e, 0x62, 0x23, 0x5b, 0x47, 0x55,
        0x53, 0x30, 0x11, 0x42, 0xf6, 0xf1, 0xb1, 0xe6, 0xc3, 0xcc, 0xf8, 0xc5, 0xe4, 0xcc, 0xc0, 0xd3,
        0x85, 0xfd, 0x9a, 0xe3, 0xe6, 0x81, 0xb5, 0xbb, 0xd7, 0xcd, 0x87, 0xa3, 0xd3, 0x6b, 0x36, 0x6f,
        0x6f, 0x66, 0x55, 0x30, 0x16, 0x45, 0x5e, 0x09, 0x74, 0x5c, 0x3f, 0x29, 0x2b, 0x66, 0x3d, 0x0d,
        0x02, 0x30, 0x28, 0x35, 0x15, 0x09, 0x15, 0xdd, 0xec, 0xb8, 0xe2, 0xfb, 0xd8, 0xcb, 0xd8, 0xd1,
        0x8b, 0xd5, 0x82, 0xd9, 0x9a, 0xf1, 0x92, 0xab, 0xe8, 0xa6, 0xd6, 0xd0, 0x8c, 0xaa, 0xd2, 0x94,
        0xcf, 0x45, 0x46, 0x67, 0x20, 0x7d, 0x44, 0x14, 0x6b, 0x45, 0x6d, 0x54, 0x03, 0x17, 0x60, 0x62,
        0x55, 0x5a, 0x4a, 0x66, 0x61, 0x11, 0x57, 0x68, 0x75, 0x05, 0x62, 0x36, 0x7d, 0x02, 0x10, 0x4b,
        0x08, 0x22, 0x42, 0x32, 0xba, 0xe2, 0xb9, 0xe2, 0xd6, 0xb9, 0xff, 0xc3, 0xe9, 0x8a, 0x8f, 0xc1,
        0x8f, 0xe1, 0xb8, 0xa4, 0x96, 0xf1, 0x8f, 0x81, 0xb1, 0x8d, 0x89, 0xcc, 0xd4, 0x78, 0x76, 0x61,
        0x72, 0x3e, 0x37, 0x23, 0x56, 0x73, 0x71, 0x79, 0x63, 0x7c, 0x08, 0x11, 0x20, 0x69, 0x7a, 0x14,
        0x68, 0x05, 0x21, 0x1e, 0x32, 0x27, 0x59, 0xb7, 0xcf, 0xab, 0xdd, 0xd5, 0xcc, 0x97, 0x93, 0xf2,
        0xe7, 0xc0, 0xeb, 0xff, 0xe9, 0xa3, 0xbf, 0xa1, 0xab, 0x8b, 0xbb, 0x9e, 0x9e, 0x8c, 0xa0, 0xc1,
        0x9b, 0x5a, 0x2f, 0x2f, 0x4e, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ],

    disassemble: false,

    regname: function (reg_index) {
        switch (reg_index) {
            case 0:
                return 'r0';
                break;
            case 1:
                return 'r1';
                break;
            case 2:
                return 'r2';
                break;
            case 3:
                return 'r3';
                break;
            case 4:
                return 'cs';
                break;
            case 5:
                return 'ds'
                break;
            default:
                throw "Invalid register index\n";
        }
    },

    movr: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "movr" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        op2 = this.mem[this.cpu.ip];
        this.cpu.ip++;
        if (mod == 0) {
            this.cpu[this.regname(op1)] = this.cpu[this.regname(op2)];
            disas += this.regname(op1) + "," + this.regname(op2) + "\n";
        }

        if (mod == 1) {
            this.cpu[this.regname(op1)] = op2;
            disas += this.regname(op1) + "," + "0x" + op2.toString(16) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    movm: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "movm" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        var op2 = this.mem[this.cpu.ip];
        this.cpu.ip++;
        if (mod == 0) {
            var mem_value = this.mem[this.cpu.ds * 16 + this.cpu[this.regname(op2)]];
            this.cpu[this.regname(op1)] = mem_value;
            disas += this.regname(op1) + ",[" + "ds:" + this.regname(op2) + "]\n";
        }

        if (mod == 1) {
            this.mem[this.cpu.ds * 16 + this.cpu[this.regname(op1)]] = this.cpu[this.regname(op2)];
            disas += "[ds:" + this.regname(op1) + "]," + this.regname(op2) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    add: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "add" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        var op2 = this.mem[this.cpu.ip];
        this.cpu.ip++;
        if (mod == 0) {
            this.cpu[this.regname(op1)] += this.cpu[this.regname(op2)];
            disas += this.regname(op1) + "," + this.regname(op2) + "\n";
        }

        if (mod == 1) {
            this.cpu[this.regname(op1)] += op2;
            disas += this.regname(op1) + "," + "0x" + op2.toString(16) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    xor: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "xor" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        var op2 = this.mem[this.cpu.ip];
        this.cpu.ip++;
        if (mod == 0) {
            this.cpu[this.regname(op1)] ^= this.cpu[this.regname(op2)];
            disas += this.regname(op1) + "," + this.regname(op2) + "\n";
        }

        if (mod == 1) {
            this.cpu[this.regname(op1)] ^= op2;
            disas += this.regname(op1) + "," + "0x" + op2.toString(16) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    cmp: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "cmp" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        var op2 = this.mem[this.cpu.ip];
        this.cpu.ip++;
        if (mod == 0) {
            if (this.cpu[this.regname(op1)] == this.cpu[this.regname(op2)])
                this.cpu.fl = 0;
            else if (this.cpu[this.regname(op1)] < this.cpu[this.regname(op2)])
                this.cpu.fl = 0xff;
            else
                this.fl = 1;
            disas += this.regname(op1) + "," + this.regname(op2) + "\n";
        }

        if (mod == 1) {
            if (this.cpu[this.regname(op1)] == op2)
                this.cpu.fl = 0;
            else if (this.cpu[this.regname(op1)] < op2)
                this.cpu.fl = 0xff;
            else
                this.cpu.fl = 1;
            disas += this.regname(op1) + "," + "0x" + op2.toString(16) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    jmpe: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "jmpe" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        if (mod == 0) {
            if (this.cpu.fl == 0) {
                this.cpu.ip = this.cpu.cs * 16 + this.cpu[this.regname(op1)];
            }
            disas += this.regname(op1) + "\n";
        }
        if (mod == 1) {
            var op2 = this.mem[this.cpu.ip];
            this.cpu.ip++;
            this.cpu['cs'] = op2;
            this.cpu.ip = this.mem[op2 * 16 + this.cpu[this.regname(op1)]];
            disas += "0x" + op2.toString(16) + ":" + this.regname(op1) + "\n";

        }
        disas_mem[code_address] = disas;
    },

    jmp: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "jmp" + " ";
        var code_address = this.cpu.ip;
        var m_code = this.mem[this.cpu.ip];
        var op1 = m_code & 0b00001111;
        this.cpu.ip++;
        if (mod == 0) {
            this.cpu.ip = this.cpu.cs * 16 + this.cpu[this.regname(op1)];
            disas += this.regname(op1) + "\n";
        }
        if (mod == 1) {
            var op2 = this.mem[this.cpu.ip];
            this.cpu.ip++;
            this.cpu['cs'] = op2;
            this.cpu.ip = op2 * 16 + this.cpu[this.regname(op1)];
            disas += "0x" + op2.toString(16) + ":" + this.regname(op1) + "\n";
        }
        disas_mem[code_address] = disas;
    },

    hlt: function (mod) {
        var disas = "0x" + this.cpu.ip.toString(16) + ":" + "jmp" + " ";
        var code_address = this.cpu.ip;
        this.cpu.ip = -1;
        disas += "hlt\n";
        disas_mem[code_address] = disas;
    },

    asm: function () {
        var m_code = this.mem[this.cpu.ip];
        var opcode = (m_code & 0b11100000) >>> 5;
        var mod = (m_code & 0b00010000) >>> 4;

        switch (opcode) {
            case 0x00: //jmp
                this.jmp(mod);
                break;
            case 0x01: //movr
                this.movr(mod);
                break;
            case 0x02: //movm
                this.movm(mod);
                break;
            case 0x03: //add
                this.add(mod);
                break;
            case 0x04: //xor
                this.xor(mod);
                break;
            case 0x05: //cmp
                this.cmp(mod);
                break;
            case 0x06: //jmpe
                this.jmpe(mod);
                break;
            case 0x07: //hlt
                this.hlt(mod);
                break;
            default:
                throw "Invalid opcode";
        }
    },

    exec: function () {
        this.cpu.ip = 0;
        this.disassemble = false;
        while (this.cpu.ip < this.mem.length && this.cpu.ip >= 0) {
            this.asm();
        }
        //throw "VM.exec not yet implemented";
        showDisas();
        this.showMem();
    },

    showMem: function () {
        var mem_code = "";
        for (var i = 0; i < 768; i++) {
            //if (this.mem[i] >= 32 && this.mem[i] <= 126)
                mem_code += String.fromCharCode(this.mem[i]);
            //else
                //mem_code += " ";
            if ((i % 16) == 15) mem_code += '<br>'
        }
        document.getElementById("mem").innerHTML = mem_code;
    }

};

var disas_mem = [];
for (var i = 0; i < 768; i++) {
    disas_mem[i] = 'invaled';
}

function showDisas() {
    var disas_code = '';
    for (var i = 0; i < 768; i++) {
        if (disas_mem[i] != 'invaled')
            disas_code += disas_mem[i] + '<br>';
    }
    document.getElementById("disas").innerHTML = disas_code;
}



//--------------------------------------------------------------------------------------------------

// try {
//     VM.exec();
// }
// catch (e) {
//     alert('\nError: ' + e + '\n');
// }